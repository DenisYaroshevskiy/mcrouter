/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include <mcrouter/lib/CacheClientStats.h>
#include <mcrouter/lib/carbon/connection/ExternalCarbonConnectionImpl.h>
#include <mcrouter/lib/carbon/connection/InternalCarbonConnectionImpl.h>
#include <mcrouter/lib/carbon/connection/PooledCarbonConnectionImpl.h>

#include "mcrouter/lib/carbon/test/gen/AMessages.h"
#include "mcrouter/lib/carbon/test/gen/ARouterInfo.h"

namespace carbon {
namespace test {
namespace A {

class AConnection {
 public:
  using RouterInfo = ARouterInfo;

  virtual ~AConnection() = default;

  virtual void sendRequestOne(
      const TestARequest&,
      carbon::RequestCb<TestARequest>) = 0;

  virtual void sendRequestMulti(
      std::vector<std::reference_wrapper<const TestARequest>>&&,
      carbon::RequestCb<TestARequest>) = 0;

  virtual facebook::memcache::CacheClientCounters getStatCounters() const noexcept = 0;
  virtual std::unordered_map<std::string, std::string> getConfigOptions() = 0;
  virtual bool healthCheck() = 0;
  virtual std::unique_ptr<AConnection> recreate() = 0;
};

template <class Impl>
class AConnectionImpl : public AConnection {
 public:
  template <class... Args>
  explicit AConnectionImpl(Args&&... args)
      : impl_(std::forward<Args>(args)...) {}

  ~AConnectionImpl() = default;

  facebook::memcache::CacheClientCounters getStatCounters() const noexcept {
    return impl_.getStatCounters();
  }

  std::unordered_map<std::string, std::string> getConfigOptions() {
    return impl_.getConfigOptions();
  }

  bool healthCheck() {
    return impl_.healthCheck();
  }

  std::unique_ptr<AConnection> recreate() {
    return impl_.template recreate<AConnectionImpl<Impl>>();
  }

  void sendRequestOne(
      const TestARequest& req,
      carbon::RequestCb<TestARequest> cb) {
    return impl_.sendRequestOne(req, std::move(cb));
  }

  void sendRequestMulti(
      std::vector<std::reference_wrapper<const TestARequest>>&& reqs,
      carbon::RequestCb<TestARequest> cb) {
    return impl_.sendRequestMulti(std::move(reqs), std::move(cb));
  }

 private:
  Impl impl_;
};

using APooledConnection =
    AConnectionImpl<carbon::PooledCarbonConnectionImpl<AConnection>>;
using AInternalConnection =
    AConnectionImpl<carbon::InternalCarbonConnectionImpl<AConnection>>;
using AExternalConnection =
    AConnectionImpl<carbon::ExternalCarbonConnectionImpl<ARouterInfo>>;
} // namespace A
} // namespace test
} // namespace carbon
